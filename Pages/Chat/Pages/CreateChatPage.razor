@page "/chats/create"
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Создание чата</PageTitle>

<div class="chat-members-container">
    <a class="no-decor" href="chats/">⬅️ Назад</a><br/>
    <input type="text" maxlength="64" @bind="@_chatName"/><br/>
    @foreach (var user in _selectedUsers)
    {
        <div class="member">
            <input type="checkbox" @onchange="@(e => _selectedUsers[user.Key] = (bool)e.Value!)"/>
                    <ChatUserComponent User="@user.Key"/>
        </div>
        
    }
    <button class="send-button" @onclick="@Submit">Создать чат</button>
</div>


@code {

    private string _chatName = "Название чата вав";
    private ChatUserModel? _currentUser;
    private Dictionary<ChatUserModel, bool> _selectedUsers = new();

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await Storage.GetCurrentUserAsync();
        var allUsers = await Storage.GetUsersAsync();
        _selectedUsers = allUsers
            .Where(u => u.Id != _currentUser.Id)
            .ToDictionary(u => u, _ => false);
    }

    private async Task Submit()
    {
        if (FormIsIncomplete()) return;
        var request = new CreateChatRequest()
        {
            ChatName = _chatName,
            MemberIds = _selectedUsers
                .Where(x => x.Value)
                .Select(x => x.Key.Id)
                .ToArray()
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Chats", request);
            var result = await response.Content.ReadFromJsonAsync<CreateChatResult>();

            int newChatId = result!.Chat.Id;
            NavigationManager.NavigateTo($"chats/{newChatId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private bool FormIsIncomplete() =>
        string.IsNullOrWhiteSpace(_chatName) ||
        _selectedUsers.Any(u => u.Value) is false;
}