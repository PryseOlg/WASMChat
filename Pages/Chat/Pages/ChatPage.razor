@page "/chats/{ChatId:int}"
@using WASMChat.Shared.Models.Chats
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using WASMChat.Shared.Results.Chats
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using WASMChat.Shared.Requests.Chats.Messages
@using WASMChat.Shared.Results.Chats.Messages
@inject HttpClient Http
@inject ChatHubClient HubClient
@inject ILogger<ChatPage> Logger;

@(HubClient.Connection.State == HubConnectionState.Connected ? "🟢" : "🔴")

<div class="chat-container">
    <a href="/Chats/">⬅️ Назад</a>
    <button class="refresh-button" @onclick="@PullMessagesAsync">🔃</button>
    <div class="chat-messages-container">
        @if (_chat is not null)
        {
            @foreach (var msg in _messages.Values
                .OrderBy(m => m.SentTime))
            {
                <ChatMessageComponent Message="@msg" IsAuthor="@(msg.Author.Id == _currentUser!.Id)"/>
            }
        }
    </div>
    <div class="chat-input-container">
        <textarea class="message-input" @bind="@_typedMessage" minlength="1" maxlength="@PostChatMessageRequest.MaxTextLength"></textarea>
        <button class="send-button" @onclick="@SendMessage">📨</button>
    </div>
</div>


@code {
    [Parameter]
    public int ChatId { get; set; }
    private ChatUserModel? _currentUser;
    private ChatModel? _chat;
    private Dictionary<int, ChatMessageModel> _messages = new();

    private string _typedMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Subscribing to hub");
        HubClient.OnMessagePosted += AddMessage;
        HubClient.OnMessageDeleted += DeleteMessage;
            
        await HubClient.StartAsync();
        await PullMessagesAsync();
    }

    private async Task PullMessagesAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<GetChatResult>($"api/Chats/{ChatId}");
            _chat = result!.Chat;
            _messages = _chat.Messages.ToDictionary(m => m.Id, m => m);
            _currentUser = result.CurrentUser;
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
    }

    private async Task SendMessage()
    {
        if (_chat is null) return;
        if (HubClient?.Connection is not { State: HubConnectionState.Connected }) return;
        if (string.IsNullOrWhiteSpace(_typedMessage)) return;
        
        var request = new PostChatMessageRequest
        {
            ChatId = _chat.Id,
            Text = _typedMessage,
        };

        try
        {
            await HubClient.PostMessage(request);
            _typedMessage = string.Empty;
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e);
            throw;
        }
    }

    private void AddMessage(PostChatMessageResult result)
    {
        Logger.LogInformation("Received event {Result}", result);
        _messages.Add(result.Message.Id, result.Message);
        StateHasChanged();
    }

    private void DeleteMessage(DeleteChatMessageResult result)
    {
        Logger.LogInformation("Deleting message with ID {Id}", result.MessageId);
        _messages.Remove(result.MessageId);
        StateHasChanged();
    }
}

